# Events generated by the contract
VyperChanged: event({newVyper: address})

# Owner of the contract
owner: public(address)

# Current ethereum contract
vyperContract: public(address)

# Old contract addresses, for reference
previousVypers: public(address[100])

# Counter for the list above, as the list itself is fix-sized
previousVypersCount: public(uint256)

# Owner of the contract is the deployer
# Initial contract address is generated when deployed
@public
def __init__(currentVyper: address):
    self.owner = msg.sender
    self.vyperContract = currentVyper

# Change the main contract address to a new one
@public
def changeVyper(newVyper: address):
    # Only the owner can do this
    assert msg.sender == self.owner
    # Make sure the address has actually changed
    if newVyper != self.vyperContract:
        # Save the current contract address to the list of old addresses
        self.previousVypers[self.previousVypersCount] = self.vyperContract
        self.previousVypersCount += 1
        # And set the new one as the current contract
        self.vyperContract = newVyper
        # Emit the event
        log.VyperChanged(newVyper)
